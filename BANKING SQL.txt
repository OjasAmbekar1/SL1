Dept (Deptno , Name , Location, Managerempid)
Employees (name, empid, address, city, dob, date_of_joining,gender, salary, deptno)
Gender must take value ‘M’ or ‘F’.
Project(Projectid, title,city).
Works (empid , Projectid, total_hrs_worked);
Dependant(empid, name_of_dependant, age, relation)
Primary Key is underlined.
1.
Develop DDL to implement the above schema enforcing primary key, check constraints (F and M for gender) and foreign key constraints.
2.
Insert data in each table .
3.
Add column Mobile number in employee table
4.
Update mobile numbers for each employee.
Develop DML to Populate Database
5.
Develop a SQL query to list employees having name starting with ‘S’
6.
Develop a SQL query to list department having location ‘Building 1’
7.
Develop a SQL query to list employee having joining year 2019 to 2020
8.
Develop a SQL query to Find the names and cities of residence of all employees who work for “Banking project”
9.
Develop a SQL query to find time required for “Banking project”
10.
Develop a SQL query to Find all employees in the database who live in the same cities as the project for which they work

CREATE TABLE Dept (
Deptno INT PRIMARY KEY,
Name VARCHAR(255),
Location VARCHAR(255),
Managerempid INT,
CONSTRAINT fk_manager FOREIGN KEY (Managerempid) REFERENCES Employees(empid)
); 
CREATE TABLE Employees (
empid INT PRIMARY KEY,
name VARCHAR(255),
address VARCHAR(255),
city VARCHAR(255),
dob DATE,
date_of_joining DATE,
gender CHAR(1) CHECK (gender IN ('M', 'F')),
salary DECIMAL(10, 2),
deptno INT,
CONSTRAINT fk_dept FOREIGN KEY (deptno) REFERENCES Dept(Deptno)
);
CREATE TABLE Project (
Projectid INT PRIMARY KEY,
title VARCHAR(255),
city VARCHAR(255)
);

CREATE TABLE Works (
empid INT,
Projectid INT,
total_hrs_worked INT,
PRIMARY KEY (empid, Projectid),
CONSTRAINT fk_emp FOREIGN KEY (empid) REFERENCES Employees(empid),
CONSTRAINT fk_project FOREIGN KEY (Projectid) REFERENCES Project(Projectid)
);
CREATE TABLE Dependant (
empid INT,
name_of_dependant VARCHAR(255),
age INT,
relation VARCHAR(255),
PRIMARY KEY (empid, name_of_dependant),
CONSTRAINT fk_dependant_emp FOREIGN KEY (empid) REFERENCES Employees(empid)
);

2. Insert data in each table:
-- Insert data into Dept
INSERT INTO Dept VALUES (1, 'HR', 'Building 1', 101);
-- Insert data into Employees
INSERT INTO Employees VALUES (101, 'John Doe', '123 Main St', 'City1', '1990-01-01', '2020-01-01', 'M', 50000.00, 1);
-- Insert data into Project
INSERT INTO Project VALUES (1, 'Banking Project', 'City2');
-- Insert data into Works
INSERT INTO Works VALUES (101, 1, 40);
-- Insert data into Dependant
INSERT INTO Dependant VALUES (101, 'Jane Doe', 10, 'Child');


3. Add column Mobile number in the employee table:
ALTER TABLE Employees
ADD COLUMN Mobile_number VARCHAR(20);


4. Update mobile numbers for each employee:
UPDATE Employees
SET Mobile_number = '123-456-7890'
WHERE empid = 101;

5. SQL query to list employees having name starting with ‘S’:
SELECT * FROM Employees
WHERE name LIKE 'S%';


6. SQL query to list departments having location ‘Building 1’:
SELECT * FROM Dept
WHERE Location = 'Building 1';


7. SQL query to list employees having joining year 2019 to 2020:
SELECT * FROM Employees
WHERE YEAR(date_of_joining) BETWEEN 2019 AND 2020;


8. SQL query to find names and cities of residence of all employees who work for “Banking project”:
SELECT E.name, E.city
FROM Employees E
JOIN Works W ON E.empid = W.empid
JOIN Project P ON W.Projectid = P.Projectid
WHERE P.title = 'Banking Project';


9. SQL query to find time required for “Banking project”:
SELECT E.name, W.total_hrs_worked
FROM Employees E
JOIN Works W ON E.empid = W.empid
JOIN Project P ON W.Projectid = P.Projectid
WHERE P.title = 'Banking Project';


10. SQL query to find all employees in the database who live in the same cities as the project for which they work:
SELECT E.name, E.city
FROM Employees E
JOIN Works W ON E.empid = W.empid
JOIN Project P ON W.Projectid = P.Projectid
WHERE E.city = P.city;E